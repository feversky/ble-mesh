// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package mesh

import "reflect"

var Types = map[string]reflect.Type{
	"AccessMessage": reflect.TypeOf((*AccessMessage)(nil)).Elem(),
	"AccessMessageTx": reflect.TypeOf((*AccessMessageTx)(nil)).Elem(),
	"AckTimeout": reflect.TypeOf((*AckTimeout)(nil)).Elem(),
	"AdvertisingBear": reflect.TypeOf((*AdvertisingBear)(nil)).Elem(),
	"AppKey": reflect.TypeOf((*AppKey)(nil)).Elem(),
	"Bear": reflect.TypeOf((*Bear)(nil)).Elem(),
	"Capability": reflect.TypeOf((*Capability)(nil)).Elem(),
	"Composition": reflect.TypeOf((*Composition)(nil)).Elem(),
	"CompositionElement": reflect.TypeOf((*CompositionElement)(nil)).Elem(),
	"DevKey": reflect.TypeOf((*DevKey)(nil)).Elem(),
	"Element": reflect.TypeOf((*Element)(nil)).Elem(),
	"Features": reflect.TypeOf((*Features)(nil)).Elem(),
	"GattProxyBear": reflect.TypeOf((*GattProxyBear)(nil)).Elem(),
	"Group": reflect.TypeOf((*Group)(nil)).Elem(),
	"LightCtlState": reflect.TypeOf((*LightCtlState)(nil)).Elem(),
	"LightCtlTemperatureState": reflect.TypeOf((*LightCtlTemperatureState)(nil)).Elem(),
	"LightnessState": reflect.TypeOf((*LightnessState)(nil)).Elem(),
	"Mesh": reflect.TypeOf((*Mesh)(nil)).Elem(),
	"Model": reflect.TypeOf((*Model)(nil)).Elem(),
	"Net": reflect.TypeOf((*Net)(nil)).Elem(),
	"NetKey": reflect.TypeOf((*NetKey)(nil)).Elem(),
	"NetworkMessage": reflect.TypeOf((*NetworkMessage)(nil)).Elem(),
	"Node": reflect.TypeOf((*Node)(nil)).Elem(),
	"NodeKeyBinding": reflect.TypeOf((*NodeKeyBinding)(nil)).Elem(),
	"OnOffState": reflect.TypeOf((*OnOffState)(nil)).Elem(),
	"ProvNode": reflect.TypeOf((*ProvNode)(nil)).Elem(),
	"ProvisionData": reflect.TypeOf((*ProvisionData)(nil)).Elem(),
	"RemainingTime": reflect.TypeOf((*RemainingTime)(nil)).Elem(),
	"SegmentAckMessage": reflect.TypeOf((*SegmentAckMessage)(nil)).Elem(),
	"TID": reflect.TypeOf((*TID)(nil)).Elem(),
	"TpSar": reflect.TypeOf((*TpSar)(nil)).Elem(),
	"Transition": reflect.TypeOf((*Transition)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"ConfigAppKeyAdd": reflect.ValueOf(ConfigAppKeyAdd),
	"ConfigAppKeyDelete": reflect.ValueOf(ConfigAppKeyDelete),
	"ConfigAppKeyGet": reflect.ValueOf(ConfigAppKeyGet),
	"ConfigAppKeyUpdate": reflect.ValueOf(ConfigAppKeyUpdate),
	"ConfigBeaconGet": reflect.ValueOf(ConfigBeaconGet),
	"ConfigBeaconSet": reflect.ValueOf(ConfigBeaconSet),
	"ConfigCompositionDataGet": reflect.ValueOf(ConfigCompositionDataGet),
	"ConfigDefaultTTLGet": reflect.ValueOf(ConfigDefaultTTLGet),
	"ConfigDefaultTTLSet": reflect.ValueOf(ConfigDefaultTTLSet),
	"ConfigFriendGet": reflect.ValueOf(ConfigFriendGet),
	"ConfigFriendSet": reflect.ValueOf(ConfigFriendSet),
	"ConfigGattProxyGet": reflect.ValueOf(ConfigGattProxyGet),
	"ConfigGattProxySet": reflect.ValueOf(ConfigGattProxySet),
	"ConfigLowPowerNodePollTimeoutGet": reflect.ValueOf(ConfigLowPowerNodePollTimeoutGet),
	"ConfigModelAppBind": reflect.ValueOf(ConfigModelAppBind),
	"ConfigModelAppUnbind": reflect.ValueOf(ConfigModelAppUnbind),
	"ConfigModelPublicationGet": reflect.ValueOf(ConfigModelPublicationGet),
	"ConfigModelPublicationSet": reflect.ValueOf(ConfigModelPublicationSet),
	"ConfigModelSubscriptionAdd": reflect.ValueOf(ConfigModelSubscriptionAdd),
	"ConfigModelSubscriptionDelete": reflect.ValueOf(ConfigModelSubscriptionDelete),
	"ConfigModelSubscriptionDeleteAll": reflect.ValueOf(ConfigModelSubscriptionDeleteAll),
	"ConfigModelSubscriptionOverwrite": reflect.ValueOf(ConfigModelSubscriptionOverwrite),
	"ConfigNetKeyAdd": reflect.ValueOf(ConfigNetKeyAdd),
	"ConfigNetKeyDelete": reflect.ValueOf(ConfigNetKeyDelete),
	"ConfigNetKeyGet": reflect.ValueOf(ConfigNetKeyGet),
	"ConfigNetKeyUpdate": reflect.ValueOf(ConfigNetKeyUpdate),
	"ConfigNetworkTransmitGet": reflect.ValueOf(ConfigNetworkTransmitGet),
	"ConfigNetworkTransmitSet": reflect.ValueOf(ConfigNetworkTransmitSet),
	"ConfigNodeIdentityGet": reflect.ValueOf(ConfigNodeIdentityGet),
	"ConfigNodeIdentitySet": reflect.ValueOf(ConfigNodeIdentitySet),
	"ConfigNodeReset": reflect.ValueOf(ConfigNodeReset),
	"ConfigRelayGet": reflect.ValueOf(ConfigRelayGet),
	"ConfigRelaySet": reflect.ValueOf(ConfigRelaySet),
	"ConfigSigModelAppGet": reflect.ValueOf(ConfigSigModelAppGet),
	"ConfigSigModelSubscriptionGet": reflect.ValueOf(ConfigSigModelSubscriptionGet),
	"ConfigVendorModelAppGet": reflect.ValueOf(ConfigVendorModelAppGet),
	"ConfigVendorModelSubscriptionGet": reflect.ValueOf(ConfigVendorModelSubscriptionGet),
	"GenericLevelGet": reflect.ValueOf(GenericLevelGet),
	"GenericLevelSet": reflect.ValueOf(GenericLevelSet),
	"GenericLevelSetUnacknowledged": reflect.ValueOf(GenericLevelSetUnacknowledged),
	"GenericOnOffGet": reflect.ValueOf(GenericOnOffGet),
	"GenericOnOffSet": reflect.ValueOf(GenericOnOffSet),
	"GenericOnOffSetUnacknowledged": reflect.ValueOf(GenericOnOffSetUnacknowledged),
	"GetDb": reflect.ValueOf(GetDb),
	"GetNode": reflect.ValueOf(GetNode),
	"Init": reflect.ValueOf(Init),
	"LightCtlDefaultGet": reflect.ValueOf(LightCtlDefaultGet),
	"LightCtlDefaultSet": reflect.ValueOf(LightCtlDefaultSet),
	"LightCtlGet": reflect.ValueOf(LightCtlGet),
	"LightCtlSet": reflect.ValueOf(LightCtlSet),
	"LightCtlTemperatureGet": reflect.ValueOf(LightCtlTemperatureGet),
	"LightCtlTemperatureRangeGet": reflect.ValueOf(LightCtlTemperatureRangeGet),
	"LightCtlTemperatureRangeSet": reflect.ValueOf(LightCtlTemperatureRangeSet),
	"LightCtlTemperatureSet": reflect.ValueOf(LightCtlTemperatureSet),
	"LightnessDefaultGet": reflect.ValueOf(LightnessDefaultGet),
	"LightnessDefaultSet": reflect.ValueOf(LightnessDefaultSet),
	"LightnessGet": reflect.ValueOf(LightnessGet),
	"LightnessLinearGet": reflect.ValueOf(LightnessLinearGet),
	"LightnessLinearSet": reflect.ValueOf(LightnessLinearSet),
	"LightnessRangeGet": reflect.ValueOf(LightnessRangeGet),
	"LightnessRangeSet": reflect.ValueOf(LightnessRangeSet),
	"LightnessSet": reflect.ValueOf(LightnessSet),
	"OnClose": reflect.ValueOf(OnClose),
	"RefreshNetKey": reflect.ValueOf(RefreshNetKey),
	"ResetNode": reflect.ValueOf(ResetNode),
	"SetNetworkBear": reflect.ValueOf(SetNetworkBear),
	"SetNode": reflect.ValueOf(SetNode),
	"SetProvisionBear": reflect.ValueOf(SetProvisionBear),
	"StartMeshNetwork": reflect.ValueOf(StartMeshNetwork),
	"StartMeshProvision": reflect.ValueOf(StartMeshProvision),
	"StopMeshNetwork": reflect.ValueOf(StopMeshNetwork),
	"StopMeshProvision": reflect.ValueOf(StopMeshProvision),
}

var Variables = map[string]reflect.Value{
}

var Consts = map[string]reflect.Value{
	"ADV_BEAR": reflect.ValueOf(ADV_BEAR),
	"ALL_NODES_ADDRESS": reflect.ValueOf(ALL_NODES_ADDRESS),
	"BEACON": reflect.ValueOf(BEACON),
	"BT_LE_ADV_BEACON": reflect.ValueOf(BT_LE_ADV_BEACON),
	"BT_LE_ADV_NETWORK": reflect.ValueOf(BT_LE_ADV_NETWORK),
	"BT_LE_ADV_PROVISION": reflect.ValueOf(BT_LE_ADV_PROVISION),
	"COMPLETE": reflect.ValueOf(COMPLETE),
	"CONTINUATION": reflect.ValueOf(CONTINUATION),
	"ConfigServer": reflect.ValueOf(ConfigServer),
	"FIRST": reflect.ValueOf(FIRST),
	"FRIENDS_ADDRESS": reflect.ValueOf(FRIENDS_ADDRESS),
	"GATT_BEAR": reflect.ValueOf(GATT_BEAR),
	"GROUP_ADDRESS_HIGH": reflect.ValueOf(GROUP_ADDRESS_HIGH),
	"GROUP_ADDRESS_LOW": reflect.ValueOf(GROUP_ADDRESS_LOW),
	"GenericAdminPropertyServer": reflect.ValueOf(GenericAdminPropertyServer),
	"GenericBatteryClient": reflect.ValueOf(GenericBatteryClient),
	"GenericBatteryServer": reflect.ValueOf(GenericBatteryServer),
	"GenericClientPropertyServer": reflect.ValueOf(GenericClientPropertyServer),
	"GenericDefaultTransitionTimeClient": reflect.ValueOf(GenericDefaultTransitionTimeClient),
	"GenericDefaultTransitionTimeServer": reflect.ValueOf(GenericDefaultTransitionTimeServer),
	"GenericLevelClient": reflect.ValueOf(GenericLevelClient),
	"GenericLevelServer": reflect.ValueOf(GenericLevelServer),
	"GenericLocationClient": reflect.ValueOf(GenericLocationClient),
	"GenericLocationServer": reflect.ValueOf(GenericLocationServer),
	"GenericLocationSetupServer": reflect.ValueOf(GenericLocationSetupServer),
	"GenericManufacturerPropertyServer": reflect.ValueOf(GenericManufacturerPropertyServer),
	"GenericOnOffClient": reflect.ValueOf(GenericOnOffClient),
	"GenericOnOffServer": reflect.ValueOf(GenericOnOffServer),
	"GenericPowerLevelClient": reflect.ValueOf(GenericPowerLevelClient),
	"GenericPowerLevelServer": reflect.ValueOf(GenericPowerLevelServer),
	"GenericPowerLevelSetupServer": reflect.ValueOf(GenericPowerLevelSetupServer),
	"GenericPowerOnOffClient": reflect.ValueOf(GenericPowerOnOffClient),
	"GenericPowerOnOffServer": reflect.ValueOf(GenericPowerOnOffServer),
	"GenericPowerOnOffSetupServer": reflect.ValueOf(GenericPowerOnOffSetupServer),
	"GenericPropertyClient": reflect.ValueOf(GenericPropertyClient),
	"GenericUserPropertyServer": reflect.ValueOf(GenericUserPropertyServer),
	"HealthServer": reflect.ValueOf(HealthServer),
	"LAST": reflect.ValueOf(LAST),
	"LightCTLClient": reflect.ValueOf(LightCTLClient),
	"LightCTLServer": reflect.ValueOf(LightCTLServer),
	"LightCTLSetupServer": reflect.ValueOf(LightCTLSetupServer),
	"LightCTLTemperatureServer": reflect.ValueOf(LightCTLTemperatureServer),
	"LightHSLClient": reflect.ValueOf(LightHSLClient),
	"LightHSLHueServer": reflect.ValueOf(LightHSLHueServer),
	"LightHSLSaturationServer": reflect.ValueOf(LightHSLSaturationServer),
	"LightHSLServer": reflect.ValueOf(LightHSLServer),
	"LightHSLSetupServer": reflect.ValueOf(LightHSLSetupServer),
	"LightLCClient": reflect.ValueOf(LightLCClient),
	"LightLCServer": reflect.ValueOf(LightLCServer),
	"LightLCSetupServer": reflect.ValueOf(LightLCSetupServer),
	"LightLightnessClient": reflect.ValueOf(LightLightnessClient),
	"LightLightnessServer": reflect.ValueOf(LightLightnessServer),
	"LightLightnessSetupServer": reflect.ValueOf(LightLightnessSetupServer),
	"LightxyLClient": reflect.ValueOf(LightxyLClient),
	"LightxyLServer": reflect.ValueOf(LightxyLServer),
	"LightxyLSetupServer": reflect.ValueOf(LightxyLSetupServer),
	"MAX_TRANSPORT_PDU": reflect.ValueOf(MAX_TRANSPORT_PDU),
	"NETWORK": reflect.ValueOf(NETWORK),
	"NODLC": reflect.ValueOf(NODLC),
	"PROVISION": reflect.ValueOf(PROVISION),
	"PROXIES_ADDRESS": reflect.ValueOf(PROXIES_ADDRESS),
	"PROXY_CONFIG": reflect.ValueOf(PROXY_CONFIG),
	"RELAYS_ADDRESS": reflect.ValueOf(RELAYS_ADDRESS),
	"SEGMENT_SIZE": reflect.ValueOf(SEGMENT_SIZE),
	"STATUS_SUCCESS": reflect.ValueOf(STATUS_SUCCESS),
	"SceneClient": reflect.ValueOf(SceneClient),
	"SceneServer": reflect.ValueOf(SceneServer),
	"SceneSetupServer": reflect.ValueOf(SceneSetupServer),
	"SchedulerClient": reflect.ValueOf(SchedulerClient),
	"SchedulerServer": reflect.ValueOf(SchedulerServer),
	"SchedulerSetupServer": reflect.ValueOf(SchedulerSetupServer),
	"SensorClient": reflect.ValueOf(SensorClient),
	"SensorServer": reflect.ValueOf(SensorServer),
	"SensorSetupServer": reflect.ValueOf(SensorSetupServer),
	"TimeClient": reflect.ValueOf(TimeClient),
	"TimeServer": reflect.ValueOf(TimeServer),
	"TimeSetupServer": reflect.ValueOf(TimeSetupServer),
	"UNASSIGNED_ADDRESS": reflect.ValueOf(UNASSIGNED_ADDRESS),
	"VIRTUAL_ADDRESS_HIGH": reflect.ValueOf(VIRTUAL_ADDRESS_HIGH),
	"VIRTUAL_ADDRESS_LOW": reflect.ValueOf(VIRTUAL_ADDRESS_LOW),
}

